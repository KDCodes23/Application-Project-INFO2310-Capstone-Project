// <auto-generated />
using System;
using HealthHorizon_API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HealthHorizon_API.Migrations
{
    [DbContext(typeof(HealthHorizonContext))]
    [Migration("20250227021614_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HealthHorizon_API.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Deails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.PersonTypes.AIChatLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.PrimitiveCollection<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("AIChatLogs");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.PersonTypes.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.PersonTypes.Bill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.PersonTypes.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Schedule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.PersonTypes.MedicalRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.PersonTypes.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.PersonTypes.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.PersonTypes.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.PersonTypes.StaffRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.PersonTypes.AIChatLog", b =>
                {
                    b.HasOne("HealthHorizon_API.Models.PersonTypes.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.PersonTypes.Appointment", b =>
                {
                    b.HasOne("HealthHorizon_API.Models.PersonTypes.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthHorizon_API.Models.PersonTypes.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.PersonTypes.Bill", b =>
                {
                    b.HasOne("HealthHorizon_API.Models.PersonTypes.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.PersonTypes.MedicalRecord", b =>
                {
                    b.HasOne("HealthHorizon_API.Models.PersonTypes.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("HealthHorizon_API.Models.Medical_Record_Types.AllergyTest", "AllergyTests", b1 =>
                        {
                            b1.Property<int>("MedicalRecordId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<bool>("Aspirin")
                                .HasColumnType("bit");

                            b1.Property<bool>("Dairy")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("Date")
                                .HasColumnType("datetime2");

                            b1.Property<int>("DoctorId")
                                .HasColumnType("int");

                            b1.Property<bool>("DustMites")
                                .HasColumnType("bit");

                            b1.Property<bool>("Egg")
                                .HasColumnType("bit");

                            b1.Property<bool>("Fish")
                                .HasColumnType("bit");

                            b1.Property<bool>("Fragrances")
                                .HasColumnType("bit");

                            b1.Property<bool>("InsectStings")
                                .HasColumnType("bit");

                            b1.Property<bool>("Latex")
                                .HasColumnType("bit");

                            b1.Property<bool>("Mold")
                                .HasColumnType("bit");

                            b1.Property<bool>("NSAIDs")
                                .HasColumnType("bit");

                            b1.Property<bool>("Nickel")
                                .HasColumnType("bit");

                            b1.Property<bool>("Peanut")
                                .HasColumnType("bit");

                            b1.Property<bool>("Penicillin")
                                .HasColumnType("bit");

                            b1.Property<bool>("PetDander")
                                .HasColumnType("bit");

                            b1.Property<bool>("Pollen")
                                .HasColumnType("bit");

                            b1.Property<bool>("Preservatives")
                                .HasColumnType("bit");

                            b1.Property<bool>("Shellfish")
                                .HasColumnType("bit");

                            b1.Property<bool>("Soy")
                                .HasColumnType("bit");

                            b1.Property<bool>("SulfaDrugs")
                                .HasColumnType("bit");

                            b1.Property<bool>("TreeNut")
                                .HasColumnType("bit");

                            b1.Property<bool>("Wheat")
                                .HasColumnType("bit");

                            b1.HasKey("MedicalRecordId", "Id");

                            b1.HasIndex("DoctorId");

                            b1.ToTable("AllergyTest");

                            b1.HasOne("HealthHorizon_API.Models.PersonTypes.Doctor", "Doctor")
                                .WithMany()
                                .HasForeignKey("DoctorId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("MedicalRecordId");

                            b1.Navigation("Doctor");
                        });

                    b.OwnsMany("HealthHorizon_API.Models.Medical_Record_Types.BodyMeasurement", "BodyMeasurements", b1 =>
                        {
                            b1.Property<int>("MedicalRecordId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<double>("BodyFatPercentage")
                                .HasColumnType("float");

                            b1.Property<double>("CalfCircumference")
                                .HasColumnType("float");

                            b1.Property<double>("ChestCircumference")
                                .HasColumnType("float");

                            b1.Property<DateTime>("Date")
                                .HasColumnType("datetime2");

                            b1.Property<int>("DoctorId")
                                .HasColumnType("int");

                            b1.Property<double>("ForearmCircumference")
                                .HasColumnType("float");

                            b1.Property<double>("Height")
                                .HasColumnType("float");

                            b1.Property<double>("HipCircumference")
                                .HasColumnType("float");

                            b1.Property<double>("MuscleMass")
                                .HasColumnType("float");

                            b1.Property<double>("NeckCircumference")
                                .HasColumnType("float");

                            b1.Property<double>("ThighCircumference")
                                .HasColumnType("float");

                            b1.Property<double>("UpperArmCircumference")
                                .HasColumnType("float");

                            b1.Property<double>("WaistCircumference")
                                .HasColumnType("float");

                            b1.Property<double>("Weight")
                                .HasColumnType("float");

                            b1.HasKey("MedicalRecordId", "Id");

                            b1.HasIndex("DoctorId");

                            b1.ToTable("BodyMeasurement");

                            b1.HasOne("HealthHorizon_API.Models.PersonTypes.Doctor", "Doctor")
                                .WithMany()
                                .HasForeignKey("DoctorId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("MedicalRecordId");

                            b1.Navigation("Doctor");
                        });

                    b.OwnsMany("HealthHorizon_API.Models.Medical_Record_Types.CardiacTest", "CardiacTests", b1 =>
                        {
                            b1.Property<int>("MedicalRecordId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<bool>("BloodPressureMonitoring")
                                .HasColumnType("bit");

                            b1.Property<bool>("CalciumScoreTest")
                                .HasColumnType("bit");

                            b1.Property<bool>("CardiacCT")
                                .HasColumnType("bit");

                            b1.Property<bool>("CardiacMRI")
                                .HasColumnType("bit");

                            b1.Property<double>("CholesterolLevel")
                                .HasColumnType("float");

                            b1.Property<bool>("CoronaryAngiogram")
                                .HasColumnType("bit");

                            b1.Property<double>("CoronaryCalciumScore")
                                .HasColumnType("float");

                            b1.Property<DateTime>("Date")
                                .HasColumnType("datetime2");

                            b1.Property<double>("DiastolicBP")
                                .HasColumnType("float");

                            b1.Property<int>("DoctorId")
                                .HasColumnType("int");

                            b1.Property<bool>("Echocardiogram")
                                .HasColumnType("bit");

                            b1.Property<double>("EjectionFraction")
                                .HasColumnType("float");

                            b1.Property<bool>("Electrocardiogram")
                                .HasColumnType("bit");

                            b1.Property<bool>("EventMonitor")
                                .HasColumnType("bit");

                            b1.Property<double>("HDLCholesterol")
                                .HasColumnType("float");

                            b1.Property<bool>("HolterMonitor")
                                .HasColumnType("bit");

                            b1.Property<double>("LDLCholesterol")
                                .HasColumnType("float");

                            b1.Property<int>("MaxHeartRate")
                                .HasColumnType("int");

                            b1.Property<int>("RestingHeartRate")
                                .HasColumnType("int");

                            b1.Property<bool>("StressTest")
                                .HasColumnType("bit");

                            b1.Property<double>("SystolicBP")
                                .HasColumnType("float");

                            b1.Property<double>("TriglycerideLevel")
                                .HasColumnType("float");

                            b1.HasKey("MedicalRecordId", "Id");

                            b1.HasIndex("DoctorId");

                            b1.ToTable("CardiacTest");

                            b1.HasOne("HealthHorizon_API.Models.PersonTypes.Doctor", "Doctor")
                                .WithMany()
                                .HasForeignKey("DoctorId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("MedicalRecordId");

                            b1.Navigation("Doctor");
                        });

                    b.OwnsMany("HealthHorizon_API.Models.Medical_Record_Types.EndocrineTest", "EndocrineTests", b1 =>
                        {
                            b1.Property<int>("MedicalRecordId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<bool>("ACTHStimulationTest")
                                .HasColumnType("bit");

                            b1.Property<double>("BloodGlucose")
                                .HasColumnType("float");

                            b1.Property<bool>("CPeptideTest")
                                .HasColumnType("bit");

                            b1.Property<double>("CalciumLevel")
                                .HasColumnType("float");

                            b1.Property<double>("CortisolLevel")
                                .HasColumnType("float");

                            b1.Property<bool>("CortisolTest")
                                .HasColumnType("bit");

                            b1.Property<double>("DHEASulfate")
                                .HasColumnType("float");

                            b1.Property<bool>("DHEASulfateTest")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("Date")
                                .HasColumnType("datetime2");

                            b1.Property<int>("DoctorId")
                                .HasColumnType("int");

                            b1.Property<double>("Estrogen")
                                .HasColumnType("float");

                            b1.Property<bool>("EstrogenTest")
                                .HasColumnType("bit");

                            b1.Property<double>("FreeT3")
                                .HasColumnType("float");

                            b1.Property<double>("FreeT4")
                                .HasColumnType("float");

                            b1.Property<bool>("GrowthHormoneTest")
                                .HasColumnType("bit");

                            b1.Property<double>("HemoglobinA1c")
                                .HasColumnType("float");

                            b1.Property<double>("InsulinLevel")
                                .HasColumnType("float");

                            b1.Property<bool>("InsulinTest")
                                .HasColumnType("bit");

                            b1.Property<double>("ParathyroidHormone")
                                .HasColumnType("float");

                            b1.Property<bool>("ParathyroidHormoneTest")
                                .HasColumnType("bit");

                            b1.Property<double>("Progesterone")
                                .HasColumnType("float");

                            b1.Property<bool>("ProgesteroneTest")
                                .HasColumnType("bit");

                            b1.Property<double>("Prolactin")
                                .HasColumnType("float");

                            b1.Property<bool>("ProlactinTest")
                                .HasColumnType("bit");

                            b1.Property<double>("TSH")
                                .HasColumnType("float");

                            b1.Property<double>("Testosterone")
                                .HasColumnType("float");

                            b1.Property<bool>("TestosteroneTest")
                                .HasColumnType("bit");

                            b1.Property<bool>("ThyroidFunctionTest")
                                .HasColumnType("bit");

                            b1.HasKey("MedicalRecordId", "Id");

                            b1.HasIndex("DoctorId");

                            b1.ToTable("EndocrineTest");

                            b1.HasOne("HealthHorizon_API.Models.PersonTypes.Doctor", "Doctor")
                                .WithMany()
                                .HasForeignKey("DoctorId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("MedicalRecordId");

                            b1.Navigation("Doctor");
                        });

                    b.OwnsMany("HealthHorizon_API.Models.Medical_Record_Types.GeneticTest", "GeneticTests", b1 =>
                        {
                            b1.Property<int>("MedicalRecordId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<string>("APCMutation")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double>("AlzheimerRiskScore")
                                .HasColumnType("float");

                            b1.Property<string>("BRCA1Mutation")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("BRCA2Mutation")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("CFTRMutation")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool>("CancerGeneticTest")
                                .HasColumnType("bit");

                            b1.Property<bool>("CardiovascularGeneticTest")
                                .HasColumnType("bit");

                            b1.Property<bool>("CarrierScreening")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("Date")
                                .HasColumnType("datetime2");

                            b1.Property<double>("DiabetesRiskScore")
                                .HasColumnType("float");

                            b1.Property<int>("DoctorId")
                                .HasColumnType("int");

                            b1.Property<string>("HBBMutation")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("HTTMutation")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double>("HeartDiseaseRiskScore")
                                .HasColumnType("float");

                            b1.Property<string>("LDLRMutation")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LRRK2Mutation")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("MTHFRMutation")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool>("NeurologicalGeneticTest")
                                .HasColumnType("bit");

                            b1.Property<double>("ObesityRiskScore")
                                .HasColumnType("float");

                            b1.Property<bool>("PharmacogeneticTest")
                                .HasColumnType("bit");

                            b1.Property<bool>("RareDiseaseTest")
                                .HasColumnType("bit");

                            b1.Property<bool>("WholeExomeSequencing")
                                .HasColumnType("bit");

                            b1.Property<bool>("WholeGenomeSequencing")
                                .HasColumnType("bit");

                            b1.HasKey("MedicalRecordId", "Id");

                            b1.HasIndex("DoctorId");

                            b1.ToTable("GeneticTest");

                            b1.HasOne("HealthHorizon_API.Models.PersonTypes.Doctor", "Doctor")
                                .WithMany()
                                .HasForeignKey("DoctorId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("MedicalRecordId");

                            b1.Navigation("Doctor");
                        });

                    b.OwnsMany("HealthHorizon_API.Models.Medical_Record_Types.ImagingReport", "ImagingReports", b1 =>
                        {
                            b1.Property<int>("MedicalRecordId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<double>("AneurysmDiameter")
                                .HasColumnType("float");

                            b1.Property<double>("BoneDensity")
                                .HasColumnType("float");

                            b1.Property<bool>("BoneDensityScan")
                                .HasColumnType("bit");

                            b1.Property<bool>("CTScan")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("Date")
                                .HasColumnType("datetime2");

                            b1.Property<int>("DoctorId")
                                .HasColumnType("int");

                            b1.Property<bool>("DopplerUltrasound")
                                .HasColumnType("bit");

                            b1.Property<bool>("Echocardiogram")
                                .HasColumnType("bit");

                            b1.Property<double>("EjectionFraction")
                                .HasColumnType("float");

                            b1.Property<string>("GeneralFindings")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Impression")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool>("MRI")
                                .HasColumnType("bit");

                            b1.Property<bool>("Mammogram")
                                .HasColumnType("bit");

                            b1.Property<bool>("PETScan")
                                .HasColumnType("bit");

                            b1.Property<string>("RadiologistNotes")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double>("TumorSize")
                                .HasColumnType("float");

                            b1.Property<bool>("Ultrasound")
                                .HasColumnType("bit");

                            b1.Property<bool>("XRay")
                                .HasColumnType("bit");

                            b1.HasKey("MedicalRecordId", "Id");

                            b1.HasIndex("DoctorId");

                            b1.ToTable("ImagingReport");

                            b1.HasOne("HealthHorizon_API.Models.PersonTypes.Doctor", "Doctor")
                                .WithMany()
                                .HasForeignKey("DoctorId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("MedicalRecordId");

                            b1.Navigation("Doctor");
                        });

                    b.OwnsMany("HealthHorizon_API.Models.Medical_Record_Types.InfectiousDiseaseTest", "InfectiousDiseaseTests", b1 =>
                        {
                            b1.Property<int>("MedicalRecordId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<bool>("Chlamydia")
                                .HasColumnType("bit");

                            b1.Property<bool>("Covid19")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("Date")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("Dengue")
                                .HasColumnType("bit");

                            b1.Property<int>("DoctorId")
                                .HasColumnType("int");

                            b1.Property<bool>("EpsteinBarrVirus")
                                .HasColumnType("bit");

                            b1.Property<bool>("Gonorrhea")
                                .HasColumnType("bit");

                            b1.Property<bool>("HIV")
                                .HasColumnType("bit");

                            b1.Property<bool>("HepatitisB")
                                .HasColumnType("bit");

                            b1.Property<bool>("HepatitisC")
                                .HasColumnType("bit");

                            b1.Property<bool>("Influenza")
                                .HasColumnType("bit");

                            b1.Property<bool>("LymeDisease")
                                .HasColumnType("bit");

                            b1.Property<bool>("MRSA")
                                .HasColumnType("bit");

                            b1.Property<bool>("Malaria")
                                .HasColumnType("bit");

                            b1.Property<string>("Notes")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Result")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool>("Syphilis")
                                .HasColumnType("bit");

                            b1.Property<string>("TestMethod")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool>("Tuberculosis")
                                .HasColumnType("bit");

                            b1.Property<bool>("ZikaVirus")
                                .HasColumnType("bit");

                            b1.HasKey("MedicalRecordId", "Id");

                            b1.HasIndex("DoctorId");

                            b1.ToTable("InfectiousDiseaseTest");

                            b1.HasOne("HealthHorizon_API.Models.PersonTypes.Doctor", "Doctor")
                                .WithMany()
                                .HasForeignKey("DoctorId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("MedicalRecordId");

                            b1.Navigation("Doctor");
                        });

                    b.OwnsMany("HealthHorizon_API.Models.Medical_Record_Types.LaboratoryTest", "LaboratoryTests", b1 =>
                        {
                            b1.Property<int>("MedicalRecordId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<double>("ALT")
                                .HasColumnType("float");

                            b1.Property<double>("AST")
                                .HasColumnType("float");

                            b1.Property<double>("Bilirubin")
                                .HasColumnType("float");

                            b1.Property<double>("BloodUreaNitrogen")
                                .HasColumnType("float");

                            b1.Property<double>("Calcium")
                                .HasColumnType("float");

                            b1.Property<double>("Cholesterol")
                                .HasColumnType("float");

                            b1.Property<double>("Creatinine")
                                .HasColumnType("float");

                            b1.Property<DateTime>("Date")
                                .HasColumnType("datetime2");

                            b1.Property<int>("DoctorId")
                                .HasColumnType("int");

                            b1.Property<double>("GFR")
                                .HasColumnType("float");

                            b1.Property<double>("Glucose")
                                .HasColumnType("float");

                            b1.Property<double>("Hemoglobin")
                                .HasColumnType("float");

                            b1.Property<string>("Notes")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double>("PlateletCount")
                                .HasColumnType("float");

                            b1.Property<double>("Potassium")
                                .HasColumnType("float");

                            b1.Property<double>("RedBloodCellCount")
                                .HasColumnType("float");

                            b1.Property<double>("Sodium")
                                .HasColumnType("float");

                            b1.Property<string>("TestLab")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool>("UrineGlucose")
                                .HasColumnType("bit");

                            b1.Property<bool>("UrineKetones")
                                .HasColumnType("bit");

                            b1.Property<bool>("UrineProtein")
                                .HasColumnType("bit");

                            b1.Property<double>("WhiteBloodCellCount")
                                .HasColumnType("float");

                            b1.HasKey("MedicalRecordId", "Id");

                            b1.HasIndex("DoctorId");

                            b1.ToTable("LaboratoryTest");

                            b1.HasOne("HealthHorizon_API.Models.PersonTypes.Doctor", "Doctor")
                                .WithMany()
                                .HasForeignKey("DoctorId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("MedicalRecordId");

                            b1.Navigation("Doctor");
                        });

                    b.OwnsMany("HealthHorizon_API.Models.Medical_Record_Types.NeurologicalTests", "NeurologicalTests", b1 =>
                        {
                            b1.Property<int>("MedicalRecordId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<bool>("BabinskiSign")
                                .HasColumnType("bit");

                            b1.Property<bool>("ClockDrawingTest")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("Date")
                                .HasColumnType("datetime2");

                            b1.Property<int>("DoctorId")
                                .HasColumnType("int");

                            b1.Property<bool>("EEGPerformed")
                                .HasColumnType("bit");

                            b1.Property<string>("EEGResults")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool>("EMGPerformed")
                                .HasColumnType("bit");

                            b1.Property<string>("EMGResults")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool>("FacialNerveWeakness")
                                .HasColumnType("bit");

                            b1.Property<bool>("FingerNoseTest")
                                .HasColumnType("bit");

                            b1.Property<bool>("GaitAssessment")
                                .HasColumnType("bit");

                            b1.Property<bool>("HearingLoss")
                                .HasColumnType("bit");

                            b1.Property<bool>("LightTouchTest")
                                .HasColumnType("bit");

                            b1.Property<int>("MMSEScore")
                                .HasColumnType("int");

                            b1.Property<bool>("MiniMentalStateExam")
                                .HasColumnType("bit");

                            b1.Property<bool>("MuscleWeakness")
                                .HasColumnType("bit");

                            b1.Property<bool>("NCVPerformed")
                                .HasColumnType("bit");

                            b1.Property<string>("NCVResults")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Notes")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool>("PainSensationTest")
                                .HasColumnType("bit");

                            b1.Property<bool>("PositionSenseTest")
                                .HasColumnType("bit");

                            b1.Property<bool>("RombergTest")
                                .HasColumnType("bit");

                            b1.Property<bool>("SwallowingDifficulty")
                                .HasColumnType("bit");

                            b1.Property<bool>("TemperatureSensationTest")
                                .HasColumnType("bit");

                            b1.Property<string>("TestLab")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool>("TrailMakingTest")
                                .HasColumnType("bit");

                            b1.Property<bool>("Tremors")
                                .HasColumnType("bit");

                            b1.Property<bool>("VerbalFluencyTest")
                                .HasColumnType("bit");

                            b1.Property<bool>("VibratorySensationTest")
                                .HasColumnType("bit");

                            b1.Property<bool>("VisionAbnormality")
                                .HasColumnType("bit");

                            b1.HasKey("MedicalRecordId", "Id");

                            b1.HasIndex("DoctorId");

                            b1.ToTable("NeurologicalTests");

                            b1.HasOne("HealthHorizon_API.Models.PersonTypes.Doctor", "Doctor")
                                .WithMany()
                                .HasForeignKey("DoctorId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("MedicalRecordId");

                            b1.Navigation("Doctor");
                        });

                    b.OwnsMany("HealthHorizon_API.Models.Medical_Record_Types.RespiratoryTest", "RespiratoryTests", b1 =>
                        {
                            b1.Property<int>("MedicalRecordId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<float>("ArterialPaCO2")
                                .HasColumnType("real");

                            b1.Property<float>("ArterialPaO2")
                                .HasColumnType("real");

                            b1.Property<bool>("BloodGasTest")
                                .HasColumnType("bit");

                            b1.Property<float>("BloodPH")
                                .HasColumnType("real");

                            b1.Property<bool>("BronchoscopyPerformed")
                                .HasColumnType("bit");

                            b1.Property<string>("BronchoscopyResults")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool>("CTScanPerformed")
                                .HasColumnType("bit");

                            b1.Property<string>("CTScanResults")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool>("ChestXRayPerformed")
                                .HasColumnType("bit");

                            b1.Property<string>("ChestXRayResults")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Date")
                                .HasColumnType("datetime2");

                            b1.Property<int>("DoctorId")
                                .HasColumnType("int");

                            b1.Property<float>("FEV1")
                                .HasColumnType("real");

                            b1.Property<float>("FEV1FVC")
                                .HasColumnType("real");

                            b1.Property<float>("FVC")
                                .HasColumnType("real");

                            b1.Property<string>("Notes")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<float>("OxygenSaturation")
                                .HasColumnType("real");

                            b1.Property<float>("PeakFlowRate")
                                .HasColumnType("real");

                            b1.Property<bool>("PeakFlowTest")
                                .HasColumnType("bit");

                            b1.Property<bool>("SpirometryPerformed")
                                .HasColumnType("bit");

                            b1.Property<string>("TestLab")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MedicalRecordId", "Id");

                            b1.HasIndex("DoctorId");

                            b1.ToTable("RespiratoryTest");

                            b1.HasOne("HealthHorizon_API.Models.PersonTypes.Doctor", "Doctor")
                                .WithMany()
                                .HasForeignKey("DoctorId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("MedicalRecordId");

                            b1.Navigation("Doctor");
                        });

                    b.OwnsMany("HealthHorizon_API.Models.Medical_Record_Types.VitalSign", "VitalSigns", b1 =>
                        {
                            b1.Property<int>("MedicalRecordId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<float>("BloodPressureDiastolic")
                                .HasColumnType("real");

                            b1.Property<float>("BloodPressureSystolic")
                                .HasColumnType("real");

                            b1.Property<DateTime>("Date")
                                .HasColumnType("datetime2");

                            b1.Property<int>("DoctorId")
                                .HasColumnType("int");

                            b1.Property<float>("HeartRate")
                                .HasColumnType("real");

                            b1.Property<string>("MeasurementLocation")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Notes")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<float>("OxygenSaturation")
                                .HasColumnType("real");

                            b1.Property<float>("RespiratoryRate")
                                .HasColumnType("real");

                            b1.Property<float>("Temperature")
                                .HasColumnType("real");

                            b1.HasKey("MedicalRecordId", "Id");

                            b1.HasIndex("DoctorId");

                            b1.ToTable("VitalSign");

                            b1.HasOne("HealthHorizon_API.Models.PersonTypes.Doctor", "Doctor")
                                .WithMany()
                                .HasForeignKey("DoctorId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("MedicalRecordId");

                            b1.Navigation("Doctor");
                        });

                    b.Navigation("AllergyTests");

                    b.Navigation("BodyMeasurements");

                    b.Navigation("CardiacTests");

                    b.Navigation("EndocrineTests");

                    b.Navigation("GeneticTests");

                    b.Navigation("ImagingReports");

                    b.Navigation("InfectiousDiseaseTests");

                    b.Navigation("LaboratoryTests");

                    b.Navigation("NeurologicalTests");

                    b.Navigation("Patient");

                    b.Navigation("RespiratoryTests");

                    b.Navigation("VitalSigns");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.PersonTypes.Patient", b =>
                {
                    b.OwnsOne("HealthHorizon_API.Models.Address", "Address", b1 =>
                        {
                            b1.Property<int>("PatientId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ProvinceOrState")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PatientId");

                            b1.ToTable("Patients");

                            b1.WithOwner()
                                .HasForeignKey("PatientId");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("HealthHorizon_API.Models.PersonTypes.Prescription", b =>
                {
                    b.HasOne("HealthHorizon_API.Models.PersonTypes.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.PersonTypes.Staff", b =>
                {
                    b.HasOne("HealthHorizon_API.Models.PersonTypes.StaffRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });
#pragma warning restore 612, 618
        }
    }
}
