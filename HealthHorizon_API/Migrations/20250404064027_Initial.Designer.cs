// <auto-generated />
using System;
using HealthHorizon_API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HealthHorizon_API.Migrations
{
    [DbContext(typeof(HealthHorizonContext))]
    [Migration("20250404064027_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HealthHorizon_API.Models.Entities.AIChatLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.PrimitiveCollection<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PatientId")
                        .IsUnique();

                    b.ToTable("AIChatLogs");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProvinceOrState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TimeSlotId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("TimeSlotId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.Entities.Bill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.Entities.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HospitalName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessionalBio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.Entities.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.Entities.MedicalRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.Entities.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.Entities.Prescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.Entities.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeOnly>("End")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("Start")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.Entities.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("StaffMembers");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.Entities.StaffRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StaffRoles");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.Entities.TimeSlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeOnly>("End")
                        .HasColumnType("time");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeOnly>("Start")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("TimeSlots");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.Medical_Record_Types.AllergyTest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Aspirin")
                        .HasColumnType("bit");

                    b.Property<bool>("Dairy")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("DustMites")
                        .HasColumnType("bit");

                    b.Property<bool>("Egg")
                        .HasColumnType("bit");

                    b.Property<bool>("Fish")
                        .HasColumnType("bit");

                    b.Property<bool>("Fragrances")
                        .HasColumnType("bit");

                    b.Property<bool>("InsectStings")
                        .HasColumnType("bit");

                    b.Property<bool>("Latex")
                        .HasColumnType("bit");

                    b.Property<Guid>("MedicalRecordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Mold")
                        .HasColumnType("bit");

                    b.Property<bool>("NSAIDs")
                        .HasColumnType("bit");

                    b.Property<bool>("Nickel")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Peanut")
                        .HasColumnType("bit");

                    b.Property<bool>("Penicillin")
                        .HasColumnType("bit");

                    b.Property<bool>("PetDander")
                        .HasColumnType("bit");

                    b.Property<bool>("Pollen")
                        .HasColumnType("bit");

                    b.Property<bool>("Preservatives")
                        .HasColumnType("bit");

                    b.Property<bool>("Shellfish")
                        .HasColumnType("bit");

                    b.Property<bool>("Soy")
                        .HasColumnType("bit");

                    b.Property<bool>("SulfaDrugs")
                        .HasColumnType("bit");

                    b.Property<bool>("TreeNut")
                        .HasColumnType("bit");

                    b.Property<bool>("Wheat")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("MedicalRecordId");

                    b.ToTable("AllergyTests");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.Medical_Record_Types.BodyMeasurement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("BodyFatPercentage")
                        .HasColumnType("float");

                    b.Property<double>("CalfCircumference")
                        .HasColumnType("float");

                    b.Property<double>("ChestCircumference")
                        .HasColumnType("float");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("ForearmCircumference")
                        .HasColumnType("float");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<double>("HipCircumference")
                        .HasColumnType("float");

                    b.Property<Guid>("MedicalRecordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("MuscleMass")
                        .HasColumnType("float");

                    b.Property<double>("NeckCircumference")
                        .HasColumnType("float");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ThighCircumference")
                        .HasColumnType("float");

                    b.Property<double>("UpperArmCircumference")
                        .HasColumnType("float");

                    b.Property<double>("WaistCircumference")
                        .HasColumnType("float");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("MedicalRecordId");

                    b.ToTable("BodyMeasurements");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.Medical_Record_Types.CardiacTest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("BloodPressureMonitoring")
                        .HasColumnType("bit");

                    b.Property<bool>("CalciumScoreTest")
                        .HasColumnType("bit");

                    b.Property<bool>("CardiacCT")
                        .HasColumnType("bit");

                    b.Property<bool>("CardiacMRI")
                        .HasColumnType("bit");

                    b.Property<double>("CholesterolLevel")
                        .HasColumnType("float");

                    b.Property<bool>("CoronaryAngiogram")
                        .HasColumnType("bit");

                    b.Property<double>("CoronaryCalciumScore")
                        .HasColumnType("float");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("DiastolicBP")
                        .HasColumnType("float");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Echocardiogram")
                        .HasColumnType("bit");

                    b.Property<double>("EjectionFraction")
                        .HasColumnType("float");

                    b.Property<bool>("Electrocardiogram")
                        .HasColumnType("bit");

                    b.Property<bool>("EventMonitor")
                        .HasColumnType("bit");

                    b.Property<double>("HDLCholesterol")
                        .HasColumnType("float");

                    b.Property<bool>("HolterMonitor")
                        .HasColumnType("bit");

                    b.Property<double>("LDLCholesterol")
                        .HasColumnType("float");

                    b.Property<int>("MaxHeartRate")
                        .HasColumnType("int");

                    b.Property<Guid>("MedicalRecordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RestingHeartRate")
                        .HasColumnType("int");

                    b.Property<bool>("StressTest")
                        .HasColumnType("bit");

                    b.Property<double>("SystolicBP")
                        .HasColumnType("float");

                    b.Property<double>("TriglycerideLevel")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("MedicalRecordId");

                    b.ToTable("CardiacTests");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.Medical_Record_Types.EndocrineTest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ACTHStimulationTest")
                        .HasColumnType("bit");

                    b.Property<double>("BloodGlucose")
                        .HasColumnType("float");

                    b.Property<bool>("CPeptideTest")
                        .HasColumnType("bit");

                    b.Property<double>("CalciumLevel")
                        .HasColumnType("float");

                    b.Property<double>("CortisolLevel")
                        .HasColumnType("float");

                    b.Property<bool>("CortisolTest")
                        .HasColumnType("bit");

                    b.Property<double>("DHEASulfate")
                        .HasColumnType("float");

                    b.Property<bool>("DHEASulfateTest")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Estrogen")
                        .HasColumnType("float");

                    b.Property<bool>("EstrogenTest")
                        .HasColumnType("bit");

                    b.Property<double>("FreeT3")
                        .HasColumnType("float");

                    b.Property<double>("FreeT4")
                        .HasColumnType("float");

                    b.Property<bool>("GrowthHormoneTest")
                        .HasColumnType("bit");

                    b.Property<double>("HemoglobinA1c")
                        .HasColumnType("float");

                    b.Property<double>("InsulinLevel")
                        .HasColumnType("float");

                    b.Property<bool>("InsulinTest")
                        .HasColumnType("bit");

                    b.Property<Guid>("MedicalRecordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ParathyroidHormone")
                        .HasColumnType("float");

                    b.Property<bool>("ParathyroidHormoneTest")
                        .HasColumnType("bit");

                    b.Property<double>("Progesterone")
                        .HasColumnType("float");

                    b.Property<bool>("ProgesteroneTest")
                        .HasColumnType("bit");

                    b.Property<double>("Prolactin")
                        .HasColumnType("float");

                    b.Property<bool>("ProlactinTest")
                        .HasColumnType("bit");

                    b.Property<double>("TSH")
                        .HasColumnType("float");

                    b.Property<double>("Testosterone")
                        .HasColumnType("float");

                    b.Property<bool>("TestosteroneTest")
                        .HasColumnType("bit");

                    b.Property<bool>("ThyroidFunctionTest")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("MedicalRecordId");

                    b.ToTable("EndocrineTests");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.Medical_Record_Types.GeneticTest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("APCMutation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("AlzheimerRiskScore")
                        .HasColumnType("float");

                    b.Property<string>("BRCA1Mutation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BRCA2Mutation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CFTRMutation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CancerGeneticTest")
                        .HasColumnType("bit");

                    b.Property<bool>("CardiovascularGeneticTest")
                        .HasColumnType("bit");

                    b.Property<bool>("CarrierScreening")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("DiabetesRiskScore")
                        .HasColumnType("float");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HBBMutation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HTTMutation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("HeartDiseaseRiskScore")
                        .HasColumnType("float");

                    b.Property<string>("LDLRMutation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LRRK2Mutation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MTHFRMutation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MedicalRecordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("NeurologicalGeneticTest")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ObesityRiskScore")
                        .HasColumnType("float");

                    b.Property<bool>("PharmacogeneticTest")
                        .HasColumnType("bit");

                    b.Property<bool>("RareDiseaseTest")
                        .HasColumnType("bit");

                    b.Property<bool>("WholeExomeSequencing")
                        .HasColumnType("bit");

                    b.Property<bool>("WholeGenomeSequencing")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("MedicalRecordId");

                    b.ToTable("GeneticTests");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.Medical_Record_Types.ImagingReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AneurysmDiameter")
                        .HasColumnType("float");

                    b.Property<double>("BoneDensity")
                        .HasColumnType("float");

                    b.Property<bool>("BoneDensityScan")
                        .HasColumnType("bit");

                    b.Property<bool>("CTScan")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("DopplerUltrasound")
                        .HasColumnType("bit");

                    b.Property<bool>("Echocardiogram")
                        .HasColumnType("bit");

                    b.Property<double>("EjectionFraction")
                        .HasColumnType("float");

                    b.Property<string>("GeneralFindings")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Impression")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MRI")
                        .HasColumnType("bit");

                    b.Property<bool>("Mammogram")
                        .HasColumnType("bit");

                    b.Property<Guid>("MedicalRecordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PETScan")
                        .HasColumnType("bit");

                    b.Property<string>("RadiologistNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TumorSize")
                        .HasColumnType("float");

                    b.Property<bool>("Ultrasound")
                        .HasColumnType("bit");

                    b.Property<bool>("XRay")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("MedicalRecordId");

                    b.ToTable("ImagingReports");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.Medical_Record_Types.InfectiousDiseaseTest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Chlamydia")
                        .HasColumnType("bit");

                    b.Property<bool>("Covid19")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Dengue")
                        .HasColumnType("bit");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("EpsteinBarrVirus")
                        .HasColumnType("bit");

                    b.Property<bool>("Gonorrhea")
                        .HasColumnType("bit");

                    b.Property<bool>("HIV")
                        .HasColumnType("bit");

                    b.Property<bool>("HepatitisB")
                        .HasColumnType("bit");

                    b.Property<bool>("HepatitisC")
                        .HasColumnType("bit");

                    b.Property<bool>("Influenza")
                        .HasColumnType("bit");

                    b.Property<bool>("LymeDisease")
                        .HasColumnType("bit");

                    b.Property<bool>("MRSA")
                        .HasColumnType("bit");

                    b.Property<bool>("Malaria")
                        .HasColumnType("bit");

                    b.Property<Guid>("MedicalRecordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Syphilis")
                        .HasColumnType("bit");

                    b.Property<string>("TestMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Tuberculosis")
                        .HasColumnType("bit");

                    b.Property<bool>("ZikaVirus")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("MedicalRecordId");

                    b.ToTable("InfectiousDiseaseTests");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.Medical_Record_Types.LaboratoryTest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("ALT")
                        .HasColumnType("float");

                    b.Property<double>("AST")
                        .HasColumnType("float");

                    b.Property<double>("Bilirubin")
                        .HasColumnType("float");

                    b.Property<double>("BloodUreaNitrogen")
                        .HasColumnType("float");

                    b.Property<double>("Calcium")
                        .HasColumnType("float");

                    b.Property<double>("Cholesterol")
                        .HasColumnType("float");

                    b.Property<double>("Creatinine")
                        .HasColumnType("float");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("GFR")
                        .HasColumnType("float");

                    b.Property<double>("Glucose")
                        .HasColumnType("float");

                    b.Property<double>("Hemoglobin")
                        .HasColumnType("float");

                    b.Property<Guid>("MedicalRecordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PlateletCount")
                        .HasColumnType("float");

                    b.Property<double>("Potassium")
                        .HasColumnType("float");

                    b.Property<double>("RedBloodCellCount")
                        .HasColumnType("float");

                    b.Property<double>("Sodium")
                        .HasColumnType("float");

                    b.Property<string>("TestLab")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UrineGlucose")
                        .HasColumnType("bit");

                    b.Property<bool>("UrineKetones")
                        .HasColumnType("bit");

                    b.Property<bool>("UrineProtein")
                        .HasColumnType("bit");

                    b.Property<double>("WhiteBloodCellCount")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("MedicalRecordId");

                    b.ToTable("LaboratoryTests");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.Medical_Record_Types.NeurologicalTest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("BabinskiSign")
                        .HasColumnType("bit");

                    b.Property<bool>("ClockDrawingTest")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("EEGPerformed")
                        .HasColumnType("bit");

                    b.Property<string>("EEGResults")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EMGPerformed")
                        .HasColumnType("bit");

                    b.Property<string>("EMGResults")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("FacialNerveWeakness")
                        .HasColumnType("bit");

                    b.Property<bool>("FingerNoseTest")
                        .HasColumnType("bit");

                    b.Property<bool>("GaitAssessment")
                        .HasColumnType("bit");

                    b.Property<bool>("HearingLoss")
                        .HasColumnType("bit");

                    b.Property<bool>("LightTouchTest")
                        .HasColumnType("bit");

                    b.Property<int>("MMSEScore")
                        .HasColumnType("int");

                    b.Property<Guid>("MedicalRecordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("MiniMentalStateExam")
                        .HasColumnType("bit");

                    b.Property<bool>("MuscleWeakness")
                        .HasColumnType("bit");

                    b.Property<bool>("NCVPerformed")
                        .HasColumnType("bit");

                    b.Property<string>("NCVResults")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PainSensationTest")
                        .HasColumnType("bit");

                    b.Property<bool>("PositionSenseTest")
                        .HasColumnType("bit");

                    b.Property<bool>("RombergTest")
                        .HasColumnType("bit");

                    b.Property<bool>("SwallowingDifficulty")
                        .HasColumnType("bit");

                    b.Property<bool>("TemperatureSensationTest")
                        .HasColumnType("bit");

                    b.Property<string>("TestLab")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TrailMakingTest")
                        .HasColumnType("bit");

                    b.Property<bool>("Tremors")
                        .HasColumnType("bit");

                    b.Property<bool>("VerbalFluencyTest")
                        .HasColumnType("bit");

                    b.Property<bool>("VibratorySensationTest")
                        .HasColumnType("bit");

                    b.Property<bool>("VisionAbnormality")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("MedicalRecordId");

                    b.ToTable("NeurologicalTests");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.Medical_Record_Types.RespiratoryTest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("ArterialPaCO2")
                        .HasColumnType("real");

                    b.Property<float>("ArterialPaO2")
                        .HasColumnType("real");

                    b.Property<bool>("BloodGasTest")
                        .HasColumnType("bit");

                    b.Property<float>("BloodPH")
                        .HasColumnType("real");

                    b.Property<bool>("BronchoscopyPerformed")
                        .HasColumnType("bit");

                    b.Property<string>("BronchoscopyResults")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CTScanPerformed")
                        .HasColumnType("bit");

                    b.Property<string>("CTScanResults")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ChestXRayPerformed")
                        .HasColumnType("bit");

                    b.Property<string>("ChestXRayResults")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("FEV1")
                        .HasColumnType("real");

                    b.Property<float>("FEV1FVC")
                        .HasColumnType("real");

                    b.Property<float>("FVC")
                        .HasColumnType("real");

                    b.Property<Guid>("MedicalRecordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("OxygenSaturation")
                        .HasColumnType("real");

                    b.Property<float>("PeakFlowRate")
                        .HasColumnType("real");

                    b.Property<bool>("PeakFlowTest")
                        .HasColumnType("bit");

                    b.Property<bool>("SpirometryPerformed")
                        .HasColumnType("bit");

                    b.Property<string>("TestLab")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("MedicalRecordId");

                    b.ToTable("RespiratoryTests");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.Medical_Record_Types.VitalSign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("BloodPressureDiastolic")
                        .HasColumnType("real");

                    b.Property<float>("BloodPressureSystolic")
                        .HasColumnType("real");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("HeartRate")
                        .HasColumnType("real");

                    b.Property<string>("MeasurementLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MedicalRecordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("OxygenSaturation")
                        .HasColumnType("real");

                    b.Property<float>("RespiratoryRate")
                        .HasColumnType("real");

                    b.Property<float>("Temperature")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("MedicalRecordId");

                    b.ToTable("VitalSigns");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HealthHorizon_API.Models.Entities.AIChatLog", b =>
                {
                    b.HasOne("HealthHorizon_API.Models.Entities.Patient", "Patient")
                        .WithOne()
                        .HasForeignKey("HealthHorizon_API.Models.Entities.AIChatLog", "PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.Entities.Appointment", b =>
                {
                    b.HasOne("HealthHorizon_API.Models.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HealthHorizon_API.Models.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HealthHorizon_API.Models.Entities.TimeSlot", "TimeSlot")
                        .WithMany()
                        .HasForeignKey("TimeSlotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("TimeSlot");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.Entities.Bill", b =>
                {
                    b.HasOne("HealthHorizon_API.Models.Entities.Appointment", "Appointment")
                        .WithOne()
                        .HasForeignKey("HealthHorizon_API.Models.Entities.Bill", "AppointmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.Entities.Doctor", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.Entities.MedicalRecord", b =>
                {
                    b.HasOne("HealthHorizon_API.Models.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.Entities.Patient", b =>
                {
                    b.HasOne("HealthHorizon_API.Models.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.Entities.Prescription", b =>
                {
                    b.HasOne("HealthHorizon_API.Models.Entities.Appointment", "Appointment")
                        .WithOne()
                        .HasForeignKey("HealthHorizon_API.Models.Entities.Prescription", "AppointmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.Entities.Schedule", b =>
                {
                    b.HasOne("HealthHorizon_API.Models.Entities.Doctor", "Doctor")
                        .WithMany("Schedules")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.Entities.Staff", b =>
                {
                    b.HasOne("HealthHorizon_API.Models.Entities.StaffRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.Entities.TimeSlot", b =>
                {
                    b.HasOne("HealthHorizon_API.Models.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HealthHorizon_API.Models.Entities.Schedule", "Schedule")
                        .WithMany("TimeSlots")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.Medical_Record_Types.AllergyTest", b =>
                {
                    b.HasOne("HealthHorizon_API.Models.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthHorizon_API.Models.Entities.MedicalRecord", "MedicalRecord")
                        .WithMany("AllergyTests")
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("MedicalRecord");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.Medical_Record_Types.BodyMeasurement", b =>
                {
                    b.HasOne("HealthHorizon_API.Models.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthHorizon_API.Models.Entities.MedicalRecord", "MedicalRecord")
                        .WithMany("BodyMeasurements")
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("MedicalRecord");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.Medical_Record_Types.CardiacTest", b =>
                {
                    b.HasOne("HealthHorizon_API.Models.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthHorizon_API.Models.Entities.MedicalRecord", "MedicalRecord")
                        .WithMany("CardiacTests")
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("MedicalRecord");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.Medical_Record_Types.EndocrineTest", b =>
                {
                    b.HasOne("HealthHorizon_API.Models.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthHorizon_API.Models.Entities.MedicalRecord", "MedicalRecord")
                        .WithMany("EndocrineTests")
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("MedicalRecord");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.Medical_Record_Types.GeneticTest", b =>
                {
                    b.HasOne("HealthHorizon_API.Models.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthHorizon_API.Models.Entities.MedicalRecord", "MedicalRecord")
                        .WithMany("GeneticTests")
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("MedicalRecord");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.Medical_Record_Types.ImagingReport", b =>
                {
                    b.HasOne("HealthHorizon_API.Models.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthHorizon_API.Models.Entities.MedicalRecord", "MedicalRecord")
                        .WithMany("ImagingReports")
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("MedicalRecord");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.Medical_Record_Types.InfectiousDiseaseTest", b =>
                {
                    b.HasOne("HealthHorizon_API.Models.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthHorizon_API.Models.Entities.MedicalRecord", "MedicalRecord")
                        .WithMany("InfectiousDiseaseTests")
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("MedicalRecord");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.Medical_Record_Types.LaboratoryTest", b =>
                {
                    b.HasOne("HealthHorizon_API.Models.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthHorizon_API.Models.Entities.MedicalRecord", "MedicalRecord")
                        .WithMany("LaboratoryTests")
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("MedicalRecord");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.Medical_Record_Types.NeurologicalTest", b =>
                {
                    b.HasOne("HealthHorizon_API.Models.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthHorizon_API.Models.Entities.MedicalRecord", "MedicalRecord")
                        .WithMany("NeurologicalTests")
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("MedicalRecord");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.Medical_Record_Types.RespiratoryTest", b =>
                {
                    b.HasOne("HealthHorizon_API.Models.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthHorizon_API.Models.Entities.MedicalRecord", "MedicalRecord")
                        .WithMany("RespiratoryTests")
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("MedicalRecord");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.Medical_Record_Types.VitalSign", b =>
                {
                    b.HasOne("HealthHorizon_API.Models.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthHorizon_API.Models.Entities.MedicalRecord", "MedicalRecord")
                        .WithMany("VitalSigns")
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("MedicalRecord");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthHorizon_API.Models.Entities.Doctor", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.Entities.MedicalRecord", b =>
                {
                    b.Navigation("AllergyTests");

                    b.Navigation("BodyMeasurements");

                    b.Navigation("CardiacTests");

                    b.Navigation("EndocrineTests");

                    b.Navigation("GeneticTests");

                    b.Navigation("ImagingReports");

                    b.Navigation("InfectiousDiseaseTests");

                    b.Navigation("LaboratoryTests");

                    b.Navigation("NeurologicalTests");

                    b.Navigation("RespiratoryTests");

                    b.Navigation("VitalSigns");
                });

            modelBuilder.Entity("HealthHorizon_API.Models.Entities.Schedule", b =>
                {
                    b.Navigation("TimeSlots");
                });
#pragma warning restore 612, 618
        }
    }
}
